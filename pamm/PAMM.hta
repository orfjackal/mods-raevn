<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<title>PA UI Mod Manager</title>
		<HTA:APPLICATION ID="PAMM" APPLICATIONNAME="PA UI Mod Manager" SCROLL="no" SINGLEINSTANCE="no">
		<link href="manager\pamm.css" rel="stylesheet" type="text/css">
	</head>

	<script type="text/javascript" src="manager\json3.min.js"></script>
	
	<script type="text/javascript">
		self.resizeTo(520, 600);
		
		var objInstalledMods = [];
		var objOnlineMods = [];
		var objPAMMVersionData = {};
		var objOptions = {};
		
		var strCurrentPanel = "news";
		var strOnlineModsFilter = "ALL";
		var strOnlineModsSort = "LAST UPDATED";
		var boolAutoWrite = true;
		var intDownloading = 0;
		
		var ONLINE_MODS_LIST_URL = "http://pamods.github.io/modlist.json";
		var ONLINE_MODS_DOWNLOAD_COUNT_URL = "http://pa.raevn.com/modcount_json.php";
		var MANAGE_URL = "http://pa.raevn.com/manage.php";
		var MOD_IS_NEW_PERIOD_DAYS = 7;
		var NEW_LINE = "\r\n";
		var NEWS_URL = "http://pamods.github.io/news.html";
		var PAMM_VERSION_DATA_URL = "http://pa.raevn.com/pammversion2.json";
		var PAMM_MOD_ID = "rPAMM";
		var PAMM_OPTIONS_FILENAME = "pamm.json";
		
		var datePAMM = new Date("2013/12/26");
		var strPAMMversion = "3.0.1";
		
		/* Sorting Functions */
		function sort_random(){
			return (Math.round(Math.random())-0.5);
		}
		
		function sort_by(field, reverse, primer) {
			var key = primer ? function(x) {return primer(x[field])} : function(x) {return x[field]};
			reverse = [-1, 1][+!!reverse];

			return function (a, b) {
				return a = key(a), b = key(b), reverse * ((a > b) - (b > a));
			} 
		}
		
		function jsSortOnlineMods() {
			switch (strOnlineModsSort) {
				case "LAST UPDATED":
					objOnlineMods.sort(sort_by('date', true, null));
					break;
				case "TITLE":
					objOnlineMods.sort(sort_by('display_name', true, null));
					break;
				case "AUTHOR":
					objOnlineMods.sort(sort_by('author', true, null));
					break;
				case "BUILD":
					objOnlineMods.sort(sort_by('build', true, null));
					break;
				case "DOWNLOADS":
					objOnlineMods.sort(sort_by('downloads', false, parseInt));
					break;
				case "RANDOM":
					objOnlineMods.sort(sort_random);
					break;
			}
		}
		
		/* Data Strings */
		function jsGetInstalledModListDataString() {
			var strInstalledModsList = {};
			
			for (var i = 0; i < objInstalledMods.length; i++) {
				strInstalledModsList[objInstalledMods[i].id] = objInstalledMods[i]
			}
			return JSON.stringify(strInstalledModsList, null, 4).replace(/\r?\n/g, NEW_LINE);
		}
		
		function jsGetUIModListGlobalDataString() {
			var global_mod_list = [];
			objInstalledMods.sort(sort_by('priority', true, parseInt));
		
			for (var i = 0; i < objInstalledMods.length; i++) {
				if (objInstalledMods[i].enabled == true) {
					if (objInstalledMods[i]["global_mod_list"] != null) {
						for (var j = 0; j < objInstalledMods[i]["global_mod_list"].length; j++) {
							global_mod_list.push(objInstalledMods[i]["global_mod_list"][j]);
						}
					}
				}
			}
			return JSON.stringify(global_mod_list, null, 4).replace(/\r?\n/g, NEW_LINE);
		}
		
		function jsGetUIModListSceneDataString() {
			var scene_mod_list  = {"connect_to_game": [], "game_over": [], "icon_atlas": [], "live_game": [], "load_planet": [], "lobby": [], "matchmaking": [], "new_game": [], "server_browser": [], "settings": [], "special_icon_atlas": [], "start": [], "system_editor": [], "transit": [], "social": [], "replay_browser": []};
			objInstalledMods.sort(sort_by('priority', true, parseInt));
			
			for (var i = 0; i < objInstalledMods.length; i++) {
				if (objInstalledMods[i].enabled == true) {
					for(var scene in objInstalledMods[i]) {
						if (scene_mod_list[scene] != null) {
							for(var j = 0; j < objInstalledMods[i][scene].length; j++) {
								scene_mod_list[scene].push(objInstalledMods[i][scene][j]);
							}
						}
					}
				}
			}
			return JSON.stringify(scene_mod_list, null, 4).replace(/\r?\n/g, "\r\n");
		}
		
		function jsGetInstalledModDataString(strModID) {
			if (jsGetInstalledMod(strModID) != null) { 
				return JSON.stringify(jsGetInstalledMod(strModID), null, 4).replace(/\r?\n/g, NEW_LINE);
			} else {
				return "";
			}
		}
		
		function jsGetModsJSONDataString() {
			var strOutput = {};
			strOutput["mount_order"] = [];
			
			objInstalledMods.sort(sort_by('priority', true, parseInt));
			
			for (var i = 0; i < objInstalledMods.length; i++) {
				if (objInstalledMods[i].enabled == true) {
					strOutput["mount_order"].push(objInstalledMods[i].identifier);
				}
			}
			return JSON.stringify(strOutput, null, 4).replace('\r\n', '\n').replace(/\r?\n/g, NEW_LINE);
		}
		
		/* Option Functions */
		function jsLoadOptionsData(strOptionsDataString) {
			objOptions = {};
			try {
				objOptions = JSON.parse(strOptionsDataString);
			} catch (err) {
				alert("An error occurred loading options file");
			}
			if (objOptions["pa_path"] == null) {
				objOptions["pa_path"] = "c:\\Program Files (x86)\\Planetary Annihilation\\PA\\PA.exe"
				if (CheckPAPresent(objOptions["pa_path"]) == false) {
					objOptions["pa_path"] = "C:\\Program Files (x86)\\Steam\\SteamApps\\common\\Planetary Annihilation\\PA\\PA.exe"
				}
			}
			
			var strPrompt = CheckPAPresent(objOptions["pa_path"]);
			
			while (strPrompt != null && strPrompt != true) {
				strPrompt = prompt("Could not find Planetary Annihilation. Please enter path to PA.exe", objOptions["pa_path"]);
				objOptions["pa_path"] = strPrompt;
				if (strPrompt != null) {
					strPrompt = CheckPAPresent(strPrompt);
					alert(strPrompt)
				}
			}
			
			document.getElementById("btnLaunch").disabled = strPrompt == null;
			WriteOptionsJSON();
		}
		
		function jsGetOptionsDataString() {
			return JSON.stringify(objOptions, null, 4).replace('\r\n', '\n').replace(/\r?\n/g, NEW_LINE)
		}
		
		function jsGetOption(strOption) {
			return objOptions[strOption];
		}
		
		/* Installed Mod Functions */
		function jsLoadInstalledModData(strModID, strModDataString) {
			var objCurrentMod = {};
			try {
				objCurrentMod = JSON.parse(strModDataString);
				
				objCurrentMod["priority"] = objCurrentMod["priority"] ? objCurrentMod["priority"] : 100;
				if (objCurrentMod["enabled"] == null || strModID == PAMM_MOD_ID) {
					objCurrentMod["enabled"] = true;
				}
				objCurrentMod["id"] = strModID;
				objInstalledMods.push(objCurrentMod);
			} catch (err) {
				var strName = strModID;
				if (objCurrentMod["display_name"] != null) {
					strName = objCurrentMod["display_name"];
				}
				alert("Error loading installed mod '" + strName + "'");
			}
		}
		
		function jsClearInstalledModData() {
			objInstalledMods = [];
		}
		
		function jsRemoveInstalledMod(strModID) {
			jsSetModEnabledStatus(strModID, false);
			for (var i = 0; i < objInstalledMods.length; i++) {
				if (objInstalledMods[i].id == strModID) {
					objInstalledMods.splice(i,1);
				}
			}
		}
		
		function jsToggleInstalledMod(strModID) {	
			var boolEnabled = document.getElementById("mod" + strModID).checked;
			document.getElementById("mod" + strModID).checked = !boolEnabled;
			jsModEnabledToggle(strModID);
		}
		
		function jsModEnabledToggle(strModID) {
			jsSetModEnabledStatus(strModID, document.getElementById("mod" + strModID).checked);			
			jsUpdateFiles();
		}
		
		function jsSetModEnabledStatus(strModID, boolEnabled) {
			var objThisMod = jsGetInstalledMod(strModID);
			objThisMod.enabled = boolEnabled;
						
			if (boolEnabled == true) {
				var boolReadyToEnable = true;
				if (objThisMod["requires"] != null) {
					for (var i = 0; i < objThisMod["requires"].length; i++) {
						if (jsGetInstalledMod(objThisMod["requires"][i]) == null) {
							
							var strName = objThisMod["requires"][i];
							if (jsGetOnlineMod(objThisMod["requires"][i]) != null) {
								strName = jsGetOnlineMod(objThisMod["requires"][i]).display_name;
							}
							alert("Cannot enable Mod: Required dependency '" + strName + "' is missing");
							boolReadyToEnable = false;
						} else {
							jsSetModEnabledStatus(objThisMod["requires"][i], boolEnabled);
						}
					}
				}
				document.getElementById("mod" + strModID).checked = boolReadyToEnable;
			} else {
				for(var i = 0; i < objInstalledMods.length; i++) {
					if (objInstalledMods[i]["requires"] != null) {
						for (var j = 0; j < objInstalledMods[i]["requires"].length; j++) {
							if (objInstalledMods[i]["requires"][j] == strModID) {
								jsSetModEnabledStatus(objInstalledMods[i].id, false);
							}
						}
					}
				}
				document.getElementById("mod" + strModID).checked = false;
			}
			WriteModinfoJSON(strModID);
		}
		
		/* HTML Generation Functions */
		function jsGenerateOnlineModsListHTML() {
			document.getElementById("mod_download_inner").innerHTML = "";
			jsSortOnlineMods();
					
			for(var i = 0; i < objOnlineMods.length; i++) {
				var mod = objOnlineMods[i];
				var id = mod.id;
				
				var strFiltered = "";
				var strDate = mod.date ? " (" + mod.date + ")" : "";
				var strBuild = mod.build ? ", build " + mod.build : "";
				
				var strModCategory = "";
				if (mod.category != null) {
					for (var j = 0; j < mod.category.length; j++) {
						strModCategory += "<span>" + mod.category[j] +"</span>";
						if (j < mod.category.length - 1) {
							strModCategory += ", ";
						}
					}
				}
				
				var strForumLink = mod.forum ? "<div class='mod_link'>[ <a href='#' onClick='LaunchURL(\"" + mod.forum + "\")'>forum</a> ]</div>" : "";
				var strInstallCount = "<img src='manager/img/download.png' style='position: absolute; margin-top:4px'> <div class='mod_count'>" + mod.downloads + " time" + (mod.downloads != 1 ? "s" : "") + "</div>";
				var strDownloadText = "install";
				var strNew = "";
				
				var dateNow = new Date();
				var dateUpdate = new Date(mod.date);
				if ((dateNow - dateUpdate)/(1000*60*60*24) < MOD_IS_NEW_PERIOD_DAYS) {
					strNew = "<span class='mod_new'>! NEW</span>"
				} else {
					if (strOnlineModsFilter == "NEWLY UPDATED") {
						strFiltered = "mod_filtered";
					}
				}
								
				if (jsGetInstalledMod(id) != null) {
					if (mod.date > jsGetInstalledMod(id).date) {
						strDownloadText = "update";
					} else {
						strDownloadText = "reinstall";
						if (strOnlineModsFilter == "REQUIRES UPDATE") {
							strFiltered = "mod_filtered";
						}
					}
					if (strOnlineModsFilter == "NOT INSTALLED") {
						strFiltered = "mod_filtered";
					}
				} else {
					strDownloadLink = "<div class='mod_link'>[ <a href='#' onClick='Call jsInstallMod(\"" + mod.url + "\", \"" + id + "\")'>install</a> ]</div>";
					if (strOnlineModsFilter == "INSTALLED" || strOnlineModsFilter == "REQUIRES UPDATE") {
						strFiltered = "mod_filtered";
					}
				}
				
				var strRequires = "";
				if (mod["requires"] != null) {
					strRequires = "<div class='mod_requires'>REQUIRES: ";
					for (var j = 0; j < mod["requires"].length; j++) {
						var strClass = "mod_requirement";
						if (jsGetInstalledMod(mod["requires"][j]) == null) {
							strClass = "mod_requirement_missing";
						}
						strRequires += "<span class='" + strClass + "'>" + mod["requires"][j] + "</span>";
						if (j < mod["requires"].length - 1) {
							strRequires += ", ";
						}
					}
					strRequires += "</div>";
				}
				
				var strDownloadLink = "<div class='mod_link mod_link_" + strDownloadText + "'>[ <a href='#' onClick='jsPreInstallMod(\"" + mod.url + "\", \"" + id + "\", {})'>" + strDownloadText + "</a> ]</div>";

				var strHTML = "<div class='download_mod " + strFiltered + "'><div class='mod_background'></div><div class='mod_icon'><img src='http://pa.raevn.com/icons/generic.png'></div><div class='mod_container_online'><div class='mod_name'>" + mod.display_name + "</div><div class='mod_author'>by " + mod.author + "</div><br/><div class='mod_version'>Version: " + mod.version + strBuild + strDate + "</div>" + strNew + strRequires + "<div class='mod_description'>" + mod.description + "</div><div class='mod_category'>" + strModCategory + "</div>" + strForumLink + strDownloadLink + strInstallCount + "</div></div>"
				document.getElementById("mod_download_inner").innerHTML += strHTML;
			}
			
		}

		function jsGenerateInstalledModsListHTML() {
			document.getElementById("mod_list").innerHTML = "";
						
			for(var i = 0; i < objInstalledMods.length; i++) {
				var mod = objInstalledMods[i];
				var id = mod.id;
				if (id != PAMM_MOD_ID) {				
					var strLinkStartHTML = "";
					var strLinkEndHTML = "";
					var strInstalled = "";
					var strDownloadLink = "";
					
					var strForumLink = mod.forum ? "<div class='mod_link' onclick='window.event.cancelBubble = true'>[ <a href='#' onClick='LaunchURL(\"" + mod.forum + "\")'>forum</a> ]</div>" : "";
					var strUninstallLink = "<div class='mod_link mod_link_uninstall' onclick='window.event.cancelBubble = true'>[ <a href='#' onClick='jsPreUninstallMod(\"" + id + "\")'>uninstall</a> ]</div>";
					
					var strDate = mod.date ? " (" + mod.date + ")" : "";
					var strBuild = mod.build ? ", build " + mod.build : "";
									
					if (jsGetOnlineMod(id) != null && mod.date < jsGetOnlineMod(id).date) {
						strInstalled = "<div class='mod_update_available'>UPDATE AVAILABLE</div>";
						strDownloadLink = "<div class='mod_link'>[ <a href='#' onClick='jsPreInstallMod(\"" + mod.url + "\",\"" + id + "\", {})'>update</a> ]</div>";
					}
					
					var strRequires = "";
					if (mod["requires"] != null) {
						strRequires = "<div class='mod_requires'>REQUIRES: ";
						for (var j = 0; j < mod["requires"].length; j++) {
							var strClass = "mod_requirement";
							if (jsGetInstalledMod(mod["requires"][j]) == null) {
								strClass = "mod_requirement_missing";
							}
							strRequires += "<span class='" + strClass + "'>" + mod["requires"][j] + "</span>";
							if (j < mod["requires"].length - 1) {
								strRequires += ", ";
							}
						}
						strRequires += "</div>";
					}
					
					var strHTML = "<div class='mod'><div class='mod_background'></div><div class='mod_enable'><input type='checkbox' id='mod" + id + "' onClick=\"jsModEnabledToggle('" + id + "')\"/></div><div class='mod_container_install' onClick=\"jsToggleInstalledMod('" + id + "')\"><div class='mod_name'>" + mod.display_name + "</div><div class='mod_author'>by " + mod.author + "</div><br/><div class='mod_version'>Version: " + mod.version + strBuild + strDate + "</div>" + strInstalled + "<br/>" + strRequires + strForumLink + strDownloadLink + strUninstallLink + "</div></div>";
					document.getElementById("mod_list").innerHTML += strHTML;
					document.getElementById("mod" + id).checked = mod.enabled;
				}
			}
		}
		
		
		/* Mod Getter Functions */
		function jsGetOnlineMod(strModID) {
			for (var i = 0; i < objOnlineMods.length; i++) {
				if (objOnlineMods[i].id == strModID) {
					return objOnlineMods[i];
				}
			}
			return null;
		}
		
		function jsGetInstalledMod(strModID) {
			for (var i = 0; i < objInstalledMods.length; i++) {
				if (objInstalledMods[i].id == strModID) {
					return objInstalledMods[i];
				}
			}
			return null;
		}
		
		/* HTML Function Calls */
		function jsToggleAvailableModsSort() {
			switch (strOnlineModsSort) {
				case "LAST UPDATED":
					strOnlineModsSort = "TITLE";
					break;
				case "TITLE":
					strOnlineModsSort = "AUTHOR";
					break;
				case "AUTHOR":
					strOnlineModsSort = "BUILD";
					break;
				case "BUILD":
					strOnlineModsSort = "DOWNLOADS";
					break;
				case "DOWNLOADS":
					strOnlineModsSort = "RANDOM";
					break;
				case "RANDOM":
					strOnlineModsSort = "LAST UPDATED";
					break;
			}
			
			document.getElementById('sort_text').innerHTML = '<a href="#" onmousedown="jsToggleAvailableModsSort()">' + strOnlineModsSort + '</a>';
			
			if (strOnlineModsSort == "RANDOM") {
				document.getElementById('sort_text').innerHTML += ' <a href="#" onmousedown="jsGenerateOnlineModsListHTML()"><img src="manager/img/refresh.png" border=0></a>';
			}
			jsGenerateOnlineModsListHTML();
		}
		
		function jsToggleAvailableModsFilter() {
			switch (strOnlineModsFilter) {
				case "ALL":
					strOnlineModsFilter = "INSTALLED";
					break;
				case "INSTALLED":
					strOnlineModsFilter = "REQUIRES UPDATE";
					break;
				case "REQUIRES UPDATE":
					strOnlineModsFilter = "NEWLY UPDATED";
					break;
				case "NEWLY UPDATED":
					strOnlineModsFilter = "NOT INSTALLED";
					break;
				case "NOT INSTALLED":
					strOnlineModsFilter = "ALL";
					break;
			}
			document.getElementById('filter_text').innerHTML = strOnlineModsFilter;
			jsGenerateOnlineModsListHTML();
		}
		
		function jsDisplayPanel(strPanelName) {
			document.getElementById('news').style.display = strPanelName == 'news' ? 'block' : 'none';
			document.getElementById('newsButton').style.color = strPanelName == 'news' ? '#F9F9F9' : '#888888';
			document.getElementById('installed').style.display = strPanelName == 'installed' ? 'block' : 'none';
			document.getElementById('modListButton').style.color = strPanelName == 'installed' ? '#F9F9F9' : '#888888';
			document.getElementById('download').style.display = strPanelName == 'download' ? 'block' : 'none';
			document.getElementById('modDownloadButton').style.color = strPanelName == 'download' ? '#F9F9F9' : '#888888';
			strCurrentPanel = strPanelName;
		}
			
		function jsPreInstallMod(strURL, strModID, objModsPreInstalled) {
			
			var objThisMod = jsGetOnlineMod(strModID);
			//TODO: TEST THIS
			if (objThisMod["requires"] != null) {
				for (var i = 0; i < objThisMod["requires"].length; i++) {
					if (jsGetInstalledMod(objThisMod["requires"][i]) == null && objModsPreInstalled[objThisMod["requires"][i]] == null) {
						objModsPreInstalled[objThisMod["requires"][i]] = true;
						var strName = objThisMod["requires"][i];
						if (jsGetOnlineMod(objThisMod["requires"][i]) != null) {
							strName = jsGetOnlineMod(objThisMod["requires"][i]).display_name;
							var boolConfirm = confirm("Install required dependency '" + strName + "'?");
							if (boolConfirm == true) {
								jsPreInstallMod(jsGetOnlineMod(objThisMod["requires"][i]).url, objThisMod["requires"][i], objModsPreInstalled);
							}
						} else {
							alert("Warning: Required dependency '" + strName + "' unavailable");
						}
					}
				}
			}
			InstallMod(strURL + "?r=" + Math.random(), strModID);
		}
		
		function jsPreUninstallMod(strModID) {
			var boolConfirm = confirm("Are you sure you want to uninstall '" + jsGetInstalledMod(strModID).display_name + "'?");
			
			if (boolConfirm == true) {
				UninstallMod(strModID);
				jsRefresh(false);
			}
		}
		
		/* Download Functions */
		function jsDownload(strURL, strOutput, strOutputFilePath, successFunction) {
			try {
				var oXMLHTTP = new ActiveXObject("MSXML2.XMLHTTP");
			} catch(e) {
				alert("Critical Error: Could not create MSXML2.XMLHTTP ActiveX object");
			}
		
			oXMLHTTP.open("GET", strURL, true);
			oXMLHTTP.onreadystatechange = function() { jsDownloadStateChange(oXMLHTTP, strOutput, strOutputFilePath, successFunction);};
			
			try {
				oXMLHTTP.send();
				intDownloading++;
				document.getElementById("downloading").style.display = "block";
			} catch(e) {
				alert("Network Error: attempting to send request to " + strURL + " - " + e.message);
			}

		}
		
		function jsDownloadStateChange(oXMLHTTP, strOutput, strOutputFilePath, successFunction) {
			var HTTP_OK = 200;
			var adTypeBinary = 1;
			var adTypeText = 2;
			var adSaveCreateOverWrite = 2;
			
			try {
				var oStream = new ActiveXObject("ADODB.Stream");
			} catch(e) {
				alert("Critical Error: Could not create ADODB.Stream ActiveX object");
				return 1;
			}
			
			if (oXMLHTTP.readyState == 4) {
				intDownloading--;
				if (intDownloading == 0) {
					document.getElementById("downloading").style.display = "none";
				}
				if (oXMLHTTP.status == HTTP_OK) {
					if (strOutput == "string") {
						oStream.Type = adTypeBinary;
						oStream.Open ();
						oStream.Write (oXMLHTTP.responseBody);
						oStream.Position = 0;
						oStream.Type = adTypeText;
						oStream.CharSet = "shift_jis";
						var strText = oStream.ReadText (oStream.Size)
						oStream.Close();
						if (successFunction != null) {
							eval(successFunction);
						}
					}
					if (strOutput == "file") {
						
						oStream.Open();
						oStream.Type = adTypeBinary;
						oStream.Write(oXMLHTTP.ResponseBody);

						try {
							oStream.SaveToFile(strOutputFilePath, adSaveCreateOverWrite);
						} catch(e) {
							alert("Write Error: Could not save file '" + strOutputFilePath + ": " + e.message);
						}
						
						oStream.Close();
						if (successFunction != null) {
							eval(successFunction);
						}
					}
					if (strOutput == null) {
						if (successFunction != null) {
							eval(successFunction);
						}
					}
				}
			}
			oStream = null;
			oXMLHTTP = null;
		}
		
		/* Refresh & Update Functions */
		function jsUpdateFiles() {
			if (boolAutoWrite == true) {
				WriteModsJSON();
				WriteUIModListJS();
				WriterModListJS();
			}
		}
		
		function jsRefresh(boolShowLoading) {
			if (boolShowLoading == true) {
				document.getElementById("news_data").innerHTML = "<div class=\"loading\">Loading...</div>";
				document.getElementById("mod_list").innerHTML = "<div class=\"loading\">Loading...</div>";
				document.getElementById("mod_download_inner").innerHTML = "<div class=\"loading\">Loading...</div>";
			}
			jsDownloadNews();
			FindInstalledMods();
			objInstalledMods.sort(sort_by('display_name', true, null));
			jsDownloadOnlineMods();
		}
		
		/* Downloads & Asynch Callbacks */
		function jsDownloadNewPAMMinstaller(strPath) {
			jsDownload(objPAMMVersionData.url, "file", strPath, "InstallPAMM('" + objPAMMVersionData.filename + "')");
		}
				
		function jsDownloadOnlineMods(strURL) {
			jsDownload(ONLINE_MODS_LIST_URL + "?r=" + Math.random(), "string", null, "jsDownloadOnlineMods_asynch(strText)");
		}
		
		function jsDownloadOnlineMods_asynch(strResult) {
			try {
				objOnlineMods = [];
				var objModData = JSON.parse(strResult);
				for (var id in objModData) {
					objModData[id]["id"] = id;
					objOnlineMods.push(objModData[id]);
				}
				
				jsDownloadOnlineModDownloadCount();
			} catch (err) {
				alert("Error loading online mod data");
			}
		}
		
		function jsDownloadOnlineModDownloadCount() {
			jsDownload(ONLINE_MODS_DOWNLOAD_COUNT_URL + "?r=" + Math.random(), "string", null, "jsDownloadOnlineModDownloadCount_asynch(strText)");
		}
		
		function jsDownloadOnlineModDownloadCount_asynch(strResult) {
			try {
				var objOnlineModsDownloadCount = JSON.parse(strResult);
				for (var i = 0; i < objOnlineMods.length; i++) {
					objOnlineMods[i]["downloads"] = objOnlineModsDownloadCount[objOnlineMods[i].id] ? objOnlineModsDownloadCount[objOnlineMods[i].id] : 0;
				}
				
				jsGenerateInstalledModsListHTML();
				jsGenerateOnlineModsListHTML();
				jsUpdateFiles();
			} catch (err) {
				alert("Error loading online mod download count data");
			}
		}
		
		function jsDownloadPAMMversion() {
			jsDownload(PAMM_VERSION_DATA_URL + "?r=" + Math.random(), "string", null, "jsDownloadPAMMversion_asynch(strText)");
		}
		
		function jsDownloadPAMMversion_asynch(strResult) {
			try {
				objPAMMVersionData = JSON.parse(strResult);
				var dateLatestPAMM = new Date(objPAMMVersionData.date);
				if (datePAMM < dateLatestPAMM) {
					UpdatePAMM(objPAMMVersionData.version, objPAMMVersionData.filename);
				}
			} catch (err) {
				alert("Error loading PAMM version data");
			}
		}
		
		function jsDownloadNews() {
			jsDownload(NEWS_URL + "?r=" + Math.random(), "string", null, "jsDownloadNews_asynch(strText)");
		}
		
		function jsDownloadNews_asynch(strResult) {
			document.getElementById("news_data").innerHTML = strResult;
		}
	</script>
		
	<!-- GUI related functions -->
	<script language="VBScript">
		Dim objShell
		Dim objFSO
		Dim objApp
		
		Dim strModsDirectoryPath
		Dim strPAMMCacheDirectoryPath
	
		Call Initialise()
			
		'Initialisation of variables
		Sub Initialise()
			Set objApp = CreateObject("Shell.Application")
			Set objFSO = CreateObject("Scripting.FileSystemObject")
			Set objShell = CreateObject("WScript.Shell")
			
			objShell.currentDirectory = Left(window.location.pathname, InStrRev(window.location.pathname, "\") - 1)
			
			strModsDirectoryPath = objShell.expandenvironmentstrings("%LOCALAPPDATA%") & "\Uber Entertainment\Planetary Annihilation\mods"
			strPAMMCacheDirectoryPath = objShell.expandenvironmentstrings("%LOCALAPPDATA%") & "\Uber Entertainment\Planetary Annihilation\pamm_cache"
			
			Call CreateFolderIfNotExists(objShell.expandenvironmentstrings("%LOCALAPPDATA%") & "\Uber Entertainment\")
			Call CreateFolderIfNotExists(objShell.expandenvironmentstrings("%LOCALAPPDATA%") & "\Uber Entertainment\Planetary Annihilation\")
			Call CreateFolderIfNotExists(objShell.expandenvironmentstrings("%LOCALAPPDATA%") & "\Uber Entertainment\Planetary Annihilation\mods\")
			Call CreateFolderIfNotExists(objShell.expandenvironmentstrings("%LOCALAPPDATA%") & "\Uber Entertainment\Planetary Annihilation\mods\rPAMM\")
			Call CreateFolderIfNotExists(objShell.expandenvironmentstrings("%LOCALAPPDATA%") & "\Uber Entertainment\Planetary Annihilation\mods\rPAMM\ui\")
			Call CreateFolderIfNotExists(objShell.expandenvironmentstrings("%LOCALAPPDATA%") & "\Uber Entertainment\Planetary Annihilation\mods\rPAMM\ui\mods\")
			Call CreateFolderIfNotExists(objShell.expandenvironmentstrings("%LOCALAPPDATA%") & "\Uber Entertainment\Planetary Annihilation\pamm_cache\")
			
			If Not(objFSO.FileExists(strModsDirectoryPath & "\rPAMM\modinfo.json")) Then
				Set objPAMMFile = objFSO.GetFile("manager\modinfo.json")
				Call objPAMMFile.Copy(strModsDirectoryPath & "\rPAMM\modinfo.json", false)
			End If
		End Sub
		
		Sub CreateFolderIfNotExists(strPath)
			If Not(objFSO.FolderExists(strPath)) Then
				objFSO.CreateFolder(strPath)
			End If
		End Sub
		
		'Launches a URL in the user's browser of choice
		Sub LaunchURL(strURL)
			objShell.Run(strURL)
		End Sub
		
		'Closes the PA Mod Manager
		Sub ClosePAMM()
			Call Self.Close()
		End Sub
				
		'Searches the PA Installation for modlist.json files
		Sub FindInstalledMods()
			Dim objFolder
			Dim objFile
			Dim objModInfoFile
			Dim objFiles
			Const ForReading = 1
			
			Set objFolder = objFSO.GetFolder(strModsDirectoryPath)

			Call jsClearInstalledModData()
			
			For Each objSubFolder in objFolder.SubFolders
				Set objFiles = objSubFolder.Files
				For Each objFile in objFiles
					If objFile.Name = "modinfo.json" Then
						Set objModInfoFile = objFSO.OpenTextFile(objSubFolder.path & "\" & objFile.name, ForReading, False)
						Call jsLoadInstalledModData(objSubFolder.name, objModInfoFile.ReadAll())
						Call objModInfoFile.close()
					End If
				Next
			Next
			
			Call jsUpdateFiles()
		End Sub
		
		'Loads in options data
		Sub LoadOptions()
			Dim objOptionsFile
			Const ForReading = 1
			
			If objFSO.FileExists(strPAMMCacheDirectoryPath & "\" & PAMM_OPTIONS_FILENAME) = True Then
				Set objOptionsFile = objFSO.OpenTextFile(strPAMMCacheDirectoryPath & "\" & PAMM_OPTIONS_FILENAME, ForReading, False)
				Call jsLoadOptionsData(objOptionsFile.ReadAll)
				Call objOptionsFile.close()
			Else
				Call jsLoadOptionsData("{}")
			End If
		End Sub
		
		'Writes Options file
		Sub WriteOptionsJSON()
			Dim objOptionsFile
			Const ForWriting = 2
		
			Set objOptionsFile = objFSO.OpenTextFile(strPAMMCacheDirectoryPath & "\" & PAMM_OPTIONS_FILENAME, ForWriting, True)
			
			objOptionsFile.Write(jsGetOptionsDataString())
			
			Call objOptionsFile.close()
		End Sub
		
		'Writes data to ui_mod_list.js
		Sub WriteUIModListJS()
			Dim objModsFile
			Const ForWriting = 2
		
			Set objModsFile = objFSO.OpenTextFile(strModsDirectoryPath & "\rPAMM\ui\mods\ui_mod_list.js", ForWriting, True)
			
			objModsFile.Write("var global_mod_list = " & jsGetUIModListGlobalDataString() & ";" & NEW_LINE & NEW_LINE)
			objModsFile.Write("var scene_mod_list = " & jsGetUIModListSceneDataString())
			
			Call objModsFile.close()
		End Sub
		
		'Writes data to mods_list.json
		Sub WriterModListJS()
			Dim objModsFile
			Const ForWriting = 2
		
			Set objModsFile = objFSO.OpenTextFile(strModsDirectoryPath & "\rPAMM\ui\mods\mods_list.json", ForWriting, True)
			
			objModsFile.Write(jsGetInstalledModListDataString())
			
			Call objModsFile.close()
			
			Call objModsFile.close()
		End Sub
		
		'Writes data to mods.json
		Sub WriteModsJSON()
			Dim objModsFile
			Const ForWriting = 2
		
			Set objModsFile = objFSO.OpenTextFile(strModsDirectoryPath & "\mods.json", ForWriting, True)
			
			objModsFile.Write(jsGetModsJSONDataString())
			
			Call objModsFile.close()
		End Sub
		
		'Writes the contents of a mods modinfo.json
		Sub WriteModinfoJSON(strModID)
			Dim objModInfoFile
			Const ForWriting = 2
		
			If objFSO.FileExists(strModsDirectoryPath & "\" & strModID & "\modinfo.json") Then
				Set objModInfoFile = objFSO.OpenTextFile(strModsDirectoryPath & "\" & strModID & "\modinfo.json", ForWriting, True)
			
				objModInfoFile.Write(jsGetInstalledModDataString(strModID))
			
				Call objModInfoFile.close()
			End If
		End Sub
		
		'Downloads and installs a mod
		Sub InstallMod(strURL, strModID)
			Dim strModFileName
			
			'Extract File Name from URL
			strModFileName = Right(strURL, Len(strURL) - inStrRev(strURL, "/"))
			strModFileName = Left(strModFileName, inStr(strModFileName, "?")-1)
			
			Call Randomize()
			Call RemoveFileFromCache(strModFileName)
			Call jsDownload(MANAGE_URL & "?download=" & strModID & "&r=" & rnd(), null, null, null)
			Call jsDownload(strURL, "file", strPAMMCacheDirectoryPath & "\" & strModFileName, "UninstallMod('" & strModID & "'); ExtractMod('" & strModFileName & "')")
		End Sub
		
		'Extracts a Mod Zip file to the mods folder
		Sub ExtractMod(strFileName)
			Dim objFiles
			
			'Check for existence of mod zip file
			If objFSO.FileExists(strPAMMCacheDirectoryPath & "\" & strFileName) = True Then
			
				'Get all files in zip
				set objFiles = objApp.NameSpace(strPAMMCacheDirectoryPath & "\" & strFileName).items

				'Extract to mods directory
				objApp.NameSpace(strModsDirectoryPath).CopyHere(objFiles)
				Call jsRefresh(false)
			End If
		End Sub
		
		'Removes a specified file from the cache, if it exists
		Sub RemoveFileFromCache(strFileName)
		
			'Check for and remove existing file if present
			If objFSO.FileExists(strPAMMCacheDirectoryPath & "\" & strFileName) = True Then
				On Error Resume Next
				Err.Clear
				
				'Can throw errors
				objFSO.deleteFile strPAMMCacheDirectoryPath & "\" & strFileName, true
				
				'An error occurred
				If Err.Number <> 0 Then
					Call DisplayError("Cache Error: Unable to remove existing file '" & strFileName & "'." & vbnewline & Err.Description)
					Err.Clear
				End If
				
				On Error Goto 0
			End If
		End Sub
		
		'Uninstalls a mod
		Sub UninstallMod(strModID)
			If objFSO.FolderExists(strModsDirectoryPath & "\" & strModID) = True Then
				On Error Resume Next
				Err.Clear
				
				'Can throw errors
				objFSO.deleteFolder strModsDirectoryPath & "\" & strModID, true
				
				'An error occurred
				If Err.Number <> 0 Then
					Call DisplayError("File Error: Unable to remove folder '" & strModID & "'." & vbnewline & Err.Description)
					Err.Clear
				End If
				
				On Error Goto 0
				
				Call jsRemoveInstalledMod(strModID)
			End If
		End Sub

		'Determines if a new version of PAMM is available, and offers to install it
		Sub UpdatePAMM(strVersion, strFilename)
			Const vbOKCancel = 1
			Const vbOK = 1
			Dim intResult
			
			intResult = msgbox("Version " & strVersion & " of PA Mod Manager is now available. Click OK to download and install.", vbOKCancel)
				
			if intResult = vbOK Then
				Call jsDownloadNewPAMMinstaller(strPAMMCacheDirectoryPath & "\" & strFilename)
			End If
		End Sub
			
		'Runs installer for new PAMM version
		Sub InstallPAMM(strFilename)
			objApp.ShellExecute strPAMMCacheDirectoryPath & "\" & strFilename, "", "", "runas", 1
			Call ClosePAMM()
		End Sub
		
		'Returns whether PA.exe exists at the specified location
		Function CheckPAPresent(strPath)
			CheckPAPresent = false
			On Error Resume Next
			Err.Clear
			
			CheckPAPresent = objFSO.FileExists(strPath)
						
			On Error Goto 0
		End Function
		
		'Launches PA
		Sub LaunchPA()
			objApp.ShellExecute jsGetOption("pa_path"), "", "", "", ""
			Call ClosePAMM()
		End Sub

	</script>

	<body onLoad="jsOnLoad()">
		<div id="container">
			<div id="installed">
				<div class="mod_list_background"></div>
				<div id="mod_list">
				</div>
			</div>
			<div id="download">
				<div class="mod_download_background"></div>
				<div class="mod_download_options">
					<div class="filter_options">SHOW: <a href="#" id="filter_text" onmousedown="jsToggleAvailableModsFilter()">ALL</a></div><div class="sort_options">SORT: <span id="sort_text"><a href="#" onmousedown="jsToggleAvailableModsSort()">LAST UPDATED</a></span></div>
				</div>
				<div id="mod_download">
					<div id="mod_download_inner">
					</div>
				</div>
			</div>
			<div id="news">
				<div class="news_background"></div>
				<div id="news_data">
					
				</div>
			</div>
			<img src="manager\img\img_pa_logo_alpha.png">
			<h1>MOD MANAGER</h1>
			
			<div class="button"><a href="#" id="newsButton" onclick="jsDisplayPanel('news')">NEWS</a></div>
			<div class="button"><a href="#" id="modListButton" onclick="jsDisplayPanel('installed')">INSTALLED MODS</a></div>
			<div class="button"><a href="#" id="modDownloadButton" onclick="jsDisplayPanel('download')">AVAILABLE MODS</a></div>
			<div class="buttons">
				<input id="btnLaunch" type="button" value="Launch PA" onClick="LaunchPA()"/>
				<input type="button" value="Refresh" onClick="jsRefresh(true)"/>
				<input type="button" value="Exit" onClick="ClosePAMM()"/>
				<div class="credits"><a href="https://forums.uberent.com/threads/rel-ui-mod-manager.50726/">Version 3.0.1</a>, by Raevn</div>
			</div>
			<div id="downloading">
				<img src="manager/img/loading.gif">
			</div>
		</div>
	</body>
	
	<script type="text/javascript">
		function jsOnLoad() {
			document.getElementById("btnLaunch").disabled = true;
			LoadOptions();
			setTimeout(function() {
				jsDownloadPAMMversion();
				jsRefresh(true);
				}, 500);
		}
	</script>
</html>
